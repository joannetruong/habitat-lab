BASE_TASK_CONFIG_PATH: "configs/tasks/pointnav_context_spot.yaml"
TOTAL_NUM_STEPS: 5e8

VERBOSE: False
TRAINER_NAME: "ddppo"
ENV_NAME: "NavRLEnv"
SIMULATOR_GPU_ID: 0
TORCH_GPU_ID: 0
VIDEO_OPTION: []
TENSORBOARD_DIR:    '/coc/pskynet3/jtruong33/develop/flash_results/outdoor_nav_results/bc/tb'
VIDEO_DIR:          '/coc/pskynet3/jtruong33/develop/flash_results/outdoor_nav_results/bc/video_dir'
EVAL_CKPT_PATH_DIR: '/coc/pskynet3/jtruong33/develop/flash_results/outdoor_nav_results/bc/checkpoints'
CHECKPOINT_FOLDER:  '/coc/pskynet3/jtruong33/develop/flash_results/outdoor_nav_results/bc/checkpoints'
TXT_DIR:            '/coc/pskynet3/jtruong33/develop/flash_results/outdoor_nav_results/bc/txts'
TEST_EPISODE_COUNT: -1
NUM_ENVIRONMENTS: 72
SENSORS: ['SPOT_LEFT_DEPTH_SENSOR', 'SPOT_RIGHT_DEPTH_SENSOR']
NUM_UPDATES: -1
LOG_INTERVAL: 10
NUM_CHECKPOINTS: 100
# Force PyTorch to be single threaded as
# this improves performance considerably
FORCE_TORCH_SINGLE_THREADED: True
EVAL_DETERMINISTIC: False
SL_LR: 2.5e-4
SL_WD: 0
BATCH_LENGTH: 8
BATCHES_PER_CHECKPOINT: 100
USE_WAYPOINT_STUDENT: False
USE_BASELINE_STUDENT: False
DEBUG_WAYPOINT: False
CLIP_MSE: False
LOSS: 'log_prob'
WAYPOINT_RMA: False

RL:
  SUCCESS_REWARD: 10.0
  SLACK_REWARD: -0.002
  COLLISION_PENALTY: 0.003
  BACKWARDS_PENALTY: 0.03
  ANG_ACCEL_PENALTY_COEFF: 0.0
  MAX_ANG_ACCEL_PENALTY: 0.1
  FULL_GEODESIC_DECAY: -1.0
  USE_OUTDOOR: False
  TEACHER_FORCE: False

  POLICY:
    name: "PointNavContextPolicy"
    action_distribution_type: "gaussian"
    ACTION_DIST:
      use_log_std: False
      clamp_std: True
    num_cnns: 1
    OBS_TRANSFORMS:
      ENABLED_TRANSFORMS: ['CUTOUT']
      PEPPER_NOISE:
        NOISE_PERCENT: 0.1
        WHITE: True
      CUTOUT:
        WHITE: True
      MEDIAN_BLUR:
        KERNEL_SIZE: 9
        NUM_ITERS: 1
  PPO:
    # ppo params
    clip_param: 0.2
    ppo_epoch: 2
    num_mini_batch: 2
    value_loss_coef: 0.5
    entropy_coef: 0.01
    lr: 2.5e-4
    eps: 1e-5
    max_grad_norm: 0.2
    num_steps: 128
    use_gae: True
    gamma: 0.99
    tau: 0.95
    use_linear_clip_decay: False
    use_linear_lr_decay: False
    reward_window_size: 50

    use_normalized_advantage: False

    hidden_size: 512
    context_hidden_size: 512
    tgt_hidden_size: 512
    tgt_encoding: "linear_2"
    use_prev_action: False
    cnn_type: "cnn_2d"

    # Use double buffered sampling, typically helps
    # when environment time is similar or large than
    # policy inference time during rollout generation
    use_double_buffered_sampler: False

  DDPPO:
    sync_frac: 0.6
    # The PyTorch distributed backend to use
    distrib_backend: NCCL
    # Visual encoder backbone
    teacher_pretrained_weights: /coc/pskynet3/jtruong33/develop/flash_results/outdoor_nav_results/spot_depth_simple_cnn_cutout_nhy_2hz_ny_rand_pitch_-1.0_1.0_bp_0.03_sd_2_16env_context_no_noise_log_waypoint/checkpoints/ckpt.64.pth
    pretrained_weights: /coc/pskynet3/jtruong33/develop/flash_results/outdoor_nav_results/spot_depth_simple_cnn_cutout_nhy_2hz_ny_rand_pitch_-1.0_1.0_bp_0.03_sd_2_16env_context_no_noise_log_waypoint/checkpoints/ckpt.64.pth
    # Initialize with pretrained weights
    pretrained: False
    # Initialize just the visual encoder backbone with pretrained weights
    pretrained_encoder: False
    # Whether or not the visual encoder backbone will be trained.
    train_encoder: False
    # Whether or not to reset the critic linear layer
    reset_critic: True

    # Model parameters
    backbone: resnet18
    rnn_type: LSTM
    num_recurrent_layers: 2

EVAL:
    SPLIT: "val"